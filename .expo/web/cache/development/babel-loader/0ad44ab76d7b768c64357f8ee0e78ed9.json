{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Style from \"../components/Style\";\nimport TextBox from 'react-native-password-eye';\nimport axios from 'axios';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport BouncyCheckbox from \"react-native-bouncy-checkbox\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar styles = StyleSheet.create(Style);\n\nvar LoginScreen = function (_Component) {\n  _inherits(LoginScreen, _Component);\n\n  var _super = _createSuper(LoginScreen);\n\n  function LoginScreen(props) {\n    var _this;\n\n    _classCallCheck(this, LoginScreen);\n\n    _this = _super.call(this, props);\n\n    _this.validate = function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(_this.state.username != '' && _this.state.password != '' && _this.state.isChecked)) {\n                _context.next = 3;\n                break;\n              }\n\n              _this.setState({\n                loading: true\n              });\n\n              return _context.abrupt(\"return\", true);\n\n            case 3:\n              Alert.alert('Enter the Username, Password or Role');\n              return _context.abrupt(\"return\", false);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.making_api_call = function _callee2() {\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!_this.validate()) {\n                _context2.next = 5;\n                break;\n              }\n\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(axios.post('https://hindware-spring-boot.herokuapp.com/hindware/login/authenticate', _this.state).then(function (response) {\n                if (response) {\n                  _this.setState({\n                    loading: true,\n                    login: true\n                  });\n\n                  var response_data = JSON.stringify(response.data);\n                  var login = JSON.stringify(true);\n\n                  try {\n                    AsyncStorage.setItem('@sih_info', response_data);\n                    AsyncStorage.setItem('loggeIn', login);\n\n                    _this.props.navigation.navigate('Home');\n\n                    _this.setState({\n                      loading: false\n                    });\n                  } catch (e) {\n                    Alert.alert(e, 'Please try again, something went wrong');\n                  }\n                } else {\n                  Alert.alert(\"Wrong credentials\");\n\n                  _this.setState({\n                    loading: false\n                  });\n                }\n              }));\n\n            case 3:\n              _context2.next = 7;\n              break;\n\n            case 5:\n              console.log('error ');\n              Alert.alert(\"Invalid credentials\");\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.state = {\n      username: '',\n      password: '',\n      loading: false,\n      isChecked: false\n    };\n    return _this;\n  }\n\n  _createClass(LoginScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return _jsx(SafeAreaView, {\n        children: _jsx(ScrollView, {\n          children: _jsxs(View, {\n            style: styles.container,\n            children: [_jsx(Image, {\n              source: require(\"../assets/logo.png\"),\n              resizeMode: \"contain\",\n              style: styles.image\n            }), _jsxs(View, {\n              children: [_jsx(View, {\n                style: {\n                  flexDirection: 'column',\n                  alignSelf: 'center'\n                },\n                children: _jsx(TextInput, {\n                  style: styles.labelUsername,\n                  placeholder: \"Username\",\n                  keyboardType: \"default\",\n                  value: this.state.username,\n                  onChangeText: function onChangeText(username) {\n                    return _this2.setState({\n                      username: username\n                    });\n                  }\n                })\n              }), _jsx(View, {\n                style: {\n                  flexDirection: 'column',\n                  alignSelf: 'center',\n                  marginTop: 10\n                },\n                children: _jsx(TextInput, {\n                  style: styles.labelTextbox,\n                  returnKeyType: \"go\",\n                  autoCorrect: false,\n                  placeholder: \"Password\",\n                  keyboardType: \"default\",\n                  secureTextEntry: true,\n                  value: this.state.password,\n                  onChangeText: function onChangeText(password) {\n                    return _this2.setState({\n                      password: password\n                    });\n                  }\n                })\n              }), _jsx(Text, {\n                style: {\n                  color: '#51a4ff',\n                  fontSize: 15,\n                  fontWeight: '900',\n                  flex: 1,\n                  alignSelf: 'flex-end',\n                  top: 50,\n                  right: 15\n                },\n                onPress: function onPress() {\n                  return _this2.props.navigation.navigate('PasswordOtp');\n                },\n                children: \"Forgot password?\"\n              }), _jsxs(View, {\n                style: {\n                  flexDirection: 'column',\n                  marginTop: 50,\n                  alignSelf: 'center'\n                },\n                children: [_jsx(BouncyCheckbox, {\n                  style: styles.checkbox,\n                  size: 25,\n                  fillColor: \"gray\",\n                  unfillColor: \"#FFFFFF\",\n                  text: \"SIH\",\n                  textStyle: {\n                    fontWeight: 'bold'\n                  },\n                  iconStyle: {\n                    borderColor: \"gray\"\n                  },\n                  onPress: function onPress() {\n                    _this2.setState({\n                      isChecked: true\n                    });\n\n                    AsyncStorage.setItem('loggedUser', 'SIH');\n                  }\n                }), _jsx(BouncyCheckbox, {\n                  style: styles.checkbox,\n                  size: 25,\n                  fillColor: \"gray\",\n                  unfillColor: \"#FFFFFF\",\n                  text: \"Zonal Manager\",\n                  textStyle: {\n                    fontWeight: 'bold'\n                  },\n                  iconStyle: {\n                    borderColor: \"gray\"\n                  },\n                  onPress: function onPress() {\n                    _this2.setState({\n                      isChecked: true\n                    });\n\n                    AsyncStorage.setItem('loggedUser', 'Zonal Manager');\n                  }\n                }), _jsx(BouncyCheckbox, {\n                  style: styles.checkbox,\n                  size: 25,\n                  fillColor: \"gray\",\n                  unfillColor: \"#FFFFFF\",\n                  text: \"ASM\",\n                  textStyle: {\n                    fontWeight: 'bold'\n                  },\n                  iconStyle: {\n                    borderColor: \"gray\"\n                  },\n                  onPress: function onPress() {\n                    _this2.setState({\n                      isChecked: true\n                    });\n\n                    AsyncStorage.setItem('loggedUser', 'ASM');\n                  }\n                }), _jsx(BouncyCheckbox, {\n                  style: styles.checkbox,\n                  size: 25,\n                  fillColor: \"gray\",\n                  unfillColor: \"#FFFFFF\",\n                  text: \"Sales Man\",\n                  textStyle: {\n                    fontWeight: 'bold'\n                  },\n                  iconStyle: {\n                    borderColor: \"gray\"\n                  },\n                  onPress: function onPress() {\n                    _this2.setState({\n                      isChecked: true\n                    });\n\n                    AsyncStorage.setItem('loggedUser', 'Sales Man');\n                  }\n                })]\n              }), _jsx(View, {\n                children: _jsx(Pressable, {\n                  style: styles.buttonStyle,\n                  onPress: function onPress() {\n                    return _this2.making_api_call();\n                  },\n                  children: _jsx(Text, {\n                    style: styles.buttonTextStyle,\n                    children: \"Sign In\"\n                  })\n                })\n              })]\n            }), _jsx(ActivityIndicator, {\n              size: \"large\",\n              animating: this.state.loading,\n              color: \"blue\"\n            })]\n          })\n        })\n      });\n    }\n  }]);\n\n  return LoginScreen;\n}(Component);\n\nexport { LoginScreen as default };","map":{"version":3,"sources":["C:/Users/parth/Desktop/hindware-react-native-main/hindware-react-native/src/screens/LoginScreen.js"],"names":["React","Component","useState","Style","TextBox","axios","AsyncStorage","BouncyCheckbox","styles","StyleSheet","create","LoginScreen","props","validate","state","username","password","isChecked","setState","loading","Alert","alert","making_api_call","post","then","response","login","response_data","JSON","stringify","data","setItem","navigation","navigate","e","console","log","container","require","image","flexDirection","alignSelf","labelUsername","marginTop","labelTextbox","color","fontSize","fontWeight","flex","top","right","checkbox","borderColor","buttonStyle","buttonTextStyle"],"mappings":"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","sourcesContent":["import React, { Component, useState } from 'react';\r\nimport { View, Text, StyleSheet, Pressable, Image, SafeAreaView, ScrollView, TextInput, Alert, ActivityIndicator } from 'react-native';\r\nimport Style from '../components/Style';\r\nimport TextBox from 'react-native-password-eye';\r\nimport axios from 'axios';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport BouncyCheckbox from \"react-native-bouncy-checkbox\";\r\n\r\n\r\n\r\nconst styles = StyleSheet.create(Style)\r\n\r\nexport default class LoginScreen extends Component {\r\n        constructor(props) {\r\n                super(props);\r\n                this.state = {\r\n                        username: '',\r\n                        password: '',\r\n                        loading: false,\r\n                        isChecked: false,\r\n                        // usernameMessage: false,     // username flag to error message\r\n                        // passwordMessage: false,     // password flag to password message\r\n                        // loading: false,\r\n                }\r\n        }\r\n\r\n        validate = async () => {\r\n\r\n                if (this.state.username != '' && this.state.password != '' && this.state.isChecked) {\r\n                        this.setState({ loading: true })\r\n                        return true;\r\n                }\r\n                Alert.alert('Enter the Username, Password or Role')\r\n                return false;\r\n        }\r\n\r\n        making_api_call = async () => {\r\n                if (this.validate()) {\r\n                        await axios.post('https://hindware-spring-boot.herokuapp.com/hindware/login/authenticate', this.state)\r\n\r\n                                .then(response => {\r\n                                        if (response) {\r\n                                                this.setState({ loading: true, login: true })\r\n                                                const response_data = JSON.stringify(response.data)\r\n                                                const login = JSON.stringify(true)\r\n\r\n                                                try {\r\n                                                        AsyncStorage.setItem('@sih_info', response_data)\r\n                                                        AsyncStorage.setItem('loggeIn', login)\r\n                                                        this.props.navigation.navigate('Home')\r\n                                                        this.setState({ loading: false })\r\n                                                } catch (e) {\r\n                                                        Alert.alert(e, 'Please try again, something went wrong')\r\n                                                }\r\n                                        } else {\r\n                                                Alert.alert(\"Wrong credentials\")\r\n                                                this.setState({ loading: false })\r\n                                        }\r\n\r\n                                })\r\n\r\n                } else {\r\n                        console.log('error ')\r\n                        Alert.alert(\"Invalid credentials\")\r\n                }\r\n        }\r\n\r\n\r\n\r\n        render() {\r\n\r\n                return (\r\n                        <SafeAreaView>\r\n\r\n                                <ScrollView>\r\n\r\n                                        <View style={styles.container}>\r\n\r\n\r\n\r\n                                                <Image\r\n                                                        source={require(\"../assets/logo.png\")}\r\n                                                        resizeMode=\"contain\"\r\n                                                        style={styles.image}\r\n                                                ></Image>\r\n                                                <View >\r\n                                                        <View style={{ flexDirection: 'column', alignSelf: 'center' }}>\r\n                                                                <TextInput\r\n                                                                        style={styles.labelUsername}\r\n                                                                        placeholder=\"Username\"\r\n                                                                        keyboardType=\"default\"\r\n                                                                        value={this.state.username}\r\n                                                                        onChangeText={username => this.setState({ username })}\r\n\r\n                                                                // onChangeText={(value) => this.setState({ username: value })}\r\n                                                                />\r\n\r\n                                                        </View>\r\n\r\n\r\n                                                        <View style={{ flexDirection: 'column', alignSelf: 'center', marginTop: 10 }}>\r\n                                                                <TextInput\r\n                                                        \r\n                                                                        style={styles.labelTextbox}\r\n                                                                        returnKeyType='go'\r\n                                                                        autoCorrect={false}\r\n                                                                        placeholder=\"Password\"\r\n                                                                        keyboardType=\"default\"\r\n                                                                        secureTextEntry={true}\r\n                                                                        value={this.state.password}\r\n                                                                        onChangeText={password => this.setState({ password })}\r\n                                                                // onChangeText={(value) => this.setState({ password: value })}\r\n                                                                />\r\n\r\n                                                        </View>\r\n\r\n\r\n                                                        <Text style={{\r\n                                                                color: '#51a4ff',\r\n                                                                fontSize: 15, fontWeight: '900', flex: 1, alignSelf: 'flex-end', top: 50, right: 15\r\n                                                        }}\r\n                                                                onPress={() => this.props.navigation.navigate('PasswordOtp')}>\r\n                                                                Forgot password?\r\n                                                        </Text>\r\n\r\n                                                        <View style={{ flexDirection: 'column', marginTop: 50, alignSelf: 'center' }}>\r\n                                                                \r\n                                                                <BouncyCheckbox\r\n                                                                        style={styles.checkbox}\r\n                                                                        size={25}\r\n                                                                        fillColor=\"gray\"\r\n                                                                        unfillColor=\"#FFFFFF\"\r\n                                                                        text=\"SIH\"\r\n                                                                        textStyle={{ fontWeight: 'bold' }}\r\n                                                                        iconStyle={{ borderColor: \"gray\" }}\r\n                                                                        onPress={() => {\r\n                                                                                this.setState({ isChecked: true })\r\n                                                                                AsyncStorage.setItem('loggedUser', 'SIH')\r\n                                                                        }}\r\n\r\n                                                                />\r\n                                                                <BouncyCheckbox\r\n                                                                        style={styles.checkbox}\r\n                                                                        size={25}\r\n                                                                        fillColor=\"gray\"\r\n                                                                        unfillColor=\"#FFFFFF\"\r\n                                                                        text=\"Zonal Manager\"\r\n                                                                        textStyle={{ fontWeight: 'bold' }}\r\n                                                                        iconStyle={{ borderColor: \"gray\" }}\r\n                                                                        onPress={() => {\r\n                                                                                this.setState({ isChecked: true })\r\n                                                                                AsyncStorage.setItem('loggedUser', 'Zonal Manager')\r\n                                                                        }}\r\n\r\n                                                                />\r\n\r\n                                                                <BouncyCheckbox\r\n                                                                        style={styles.checkbox}\r\n                                                                        size={25}\r\n                                                                        fillColor=\"gray\"\r\n                                                                        unfillColor=\"#FFFFFF\"\r\n                                                                        text=\"ASM\"\r\n                                                                        textStyle={{ fontWeight: 'bold' }}\r\n                                                                        iconStyle={{ borderColor: \"gray\" }}\r\n                                                                        onPress={() => {\r\n                                                                                this.setState({ isChecked: true })\r\n                                                                                AsyncStorage.setItem('loggedUser', 'ASM')\r\n                                                                        }}\r\n                                                                />\r\n                                                                <BouncyCheckbox\r\n                                                                        style={styles.checkbox}\r\n                                                                        size={25}\r\n                                                                        fillColor=\"gray\"\r\n                                                                        unfillColor=\"#FFFFFF\"\r\n                                                                        text=\"Sales Man\"\r\n                                                                        textStyle={{ fontWeight: 'bold' }}\r\n                                                                        iconStyle={{ borderColor: \"gray\" }}\r\n                                                                        onPress={() => {\r\n                                                                                this.setState({ isChecked: true })\r\n                                                                                AsyncStorage.setItem('loggedUser', 'Sales Man')\r\n                                                                        }}\r\n\r\n                                                                />\r\n\r\n                                                        </View>\r\n                                                        <View>\r\n                                                                <Pressable\r\n                                                                        style={styles.buttonStyle}\r\n                                                                        onPress={() => this.making_api_call()}>\r\n                                                                        <Text style={styles.buttonTextStyle}>Sign In</Text>\r\n                                                                </Pressable>\r\n                                                        </View>\r\n                                                </View>\r\n\r\n                                                <ActivityIndicator size=\"large\" animating={this.state.loading} color=\"blue\" />\r\n\r\n                                        </View>\r\n                                </ScrollView>\r\n                        </SafeAreaView >\r\n\r\n                );\r\n\r\n        }\r\n\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}